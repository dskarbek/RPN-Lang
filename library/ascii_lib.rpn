{ { CHAR TO ASCII
    returns the numeric ascii code for a character.  Expects 1 argument: the
    character. If the input token is not a single character or is not recognized
    then undef is returned. } #
    a . char :=
    { a . char ? == { true } { # false } if_else -> } _ascii_table_lookup ->
    char unassign ->
} char_to_ascii :=

{ { ASCII TO CHAR 
    Returns the character string for a numeric ascii code.  Expects 1 argument:
    the ascii number. } #
    1 * ascii :=
    { c := ascii ? == { c ?! true } { c ?! # false } if_else -> }  _ascii_table_lookup ->
    ascii unassign ->
} ascii_to_char :=

{ { IS ALPHA 
    Returns true if the input token is an upper or lower case letter } #
    char_to_ascii ->
    is_alpha_ascii ->
} is_alpha :=

{ { IS LOWER ASCII
    Returns true if the input is the ascii value of a lower-case alphabet character } #
    a :=
    a ? 97 >=  a ?! 122 <= &&
} is_lower_ascii :=

{ { IS UPPER ASCII
    Returns true if the input is the ascii value of an upper-case alphabet character } #
    a :=
    a ? 65 >=  a ?!  90 <= &&
} is_upper_ascii :=

{ { IS ALPHA ASCII
    Returns true if the input is the ascii value of an alphabet character } #
    a :=
    a ?  is_upper_ascii ->
    a ?! is_lower_ascii -> ||
} is_alpha_ascii :=

{ { IS DIGIT 
    Returns true if the input token is a number character } #
    char_to_ascii ->
    is_digit_ascii ->
} is_digit :=

{ { IS DIGIT ASCII
    Returns true if the input token is the ascii code for a digit } #
    a :=
    a ? 48 >= a ?! 57 <= &&
} is_digit_ascii :=

{ { IS ALPHA-NUMERIC 
    Returns true if the input token is either a digit or an alphabet character } #
    char_to_ascii ->
    a :=
    a ?  is_digit_ascii ->
    a ?! is_alpha_ascii -> ||
} is_alphanumeric :=

{ { TO UPPER 
    Converts the top character on the stack into an upper-case letter if it is a
    lower case letter. } #
    char :=
    char ? char_to_ascii ->
    if # :: is_lower_ascii ->
    {
        32 - ascii_to_char ->
    }
    else #
    {
        # char ?
    } if_else ->
    char unassign ->
} to_upper :=

{ { TO LOWER 
    Converts the top character on the stack into an upper-case letter if it is a
    lower case letter. } #
    char :=
    char ? char_to_ascii ->
    if # :: is_upper_ascii ->
    {
        32 + ascii_to_char ->
    }
    else #
    {
        # char ?
    } if_else ->
    char unassign ->
} to_lower :=

{ { INTERNAL ASCII TABLE LOOKUP } #
    selector :=

    --START--
    32  "
    33  \!
    34  \"
    35  \#
    36  \$
    37  \%
    38  \&
    39  \'
    40  \(
    41  \)
    42  \*
    43  \+
    44  \,
    45  \-
    46  \.
    47  \/
    48  0
    49  1
    50  2
    51  3
    52  4
    53  5
    54  6
    55  7
    56  8
    57  9
    58  \:
    59  \;
    60  \<
    61  \=
    62  \>
    63  \?
    64  \@
    65  A
    66  B
    67  C
    68  D
    69  E
    70  F
    71  G
    72  H
    73  I
    74  J
    75  K
    76  L
    77  M
    78  N
    79  O
    80  P
    81  Q
    82  R
    83  S
    84  T
    85  U
    86  V
    87  W
    88  X
    89  Y
    90  Z
    91  \{
    92  \\
    93  \]
    94  \^
    95  \_
    96  \`
    97  a
    98  b
    99  c
    100 d
    101 e
    102 f
    103 g
    104 h
    105 i
    106 j
    107 k
    108 l
    109 m
    110 n
    111 o
    112 p
    113 q
    114 r
    115 s
    116 t
    117 u
    118 v
    119 w
    120 x
    121 y
    122 z
    123 \{
    124 \|
    125 \}
    126 \~

    undef result :=

    while # { :: --START-- != }
    {
        if # selector ->
        {
            result overwrite ->
            stop_looping ->
        } if ->
    } while ->

    
    while # { --START-- != }
    {
        #
    } while ->

    result ?!
    selector unassign ->
} _ascii_table_lookup :=
